# Load packages
require(cmdstanr)
require(posterior)
require(dplyr)
require(data.table)
require(tictoc)
require(ggpubr)
require(ggplot2)

# Set cmdstan path according to machine used
system_cmdstan_path <- c("C:/Users/aarka/Documents/.cmdstan/cmdstan-2.32.0", 
                         "C:/Users/gymno/Documents/.cmdstan/cmdstan-2.32.0")
for (path in system_cmdstan_path){
  if (file.exists(path)){
    set_cmdstan_path(path)
  }
}


# Data Prep - Run first before models -------------------------------------

## Load participant data
load(here::here("data", "actual", "Killgore2007_GUM4", "Killgore2007_GUM4_merged.Rdata"))
igt_data <- trial_data[order(PtID, session)]

## Get no. of unique participants 
n_participants <- igt_data$PtID %>% unique() %>% length()
n_trials       <- igt_data$Trial %>% unique() %>% length()

## Re-index participants for stan modelling
counter <- 0
for (row_x in 1:nrow(igt_data)){
  if (igt_data[row_x]$Trial == 1){
    counter <- counter + 1
  }
  igt_data[row_x, stan_index := counter]
}

# Stan Modelling ----------------------------------------------------------

## Load models
source(here::here("scripts", "model_library.R"))
model_stan_dir <- here::here('scripts', 'stan-files')


# Organise data for Stan
stan_data <- list(
  # Metadata
  N         = length(unique(igt_data$stan_index)),
  T         = nrow(igt_data),
  n_options = 4,
  all_options = 1:4,
  
  # Indices
  trial_no  = igt_data$Trial,
  p_ix      = igt_data$stan_index,
  session = igt_data[, session],
  
  # data
  actions   = igt_data[, choice],
  gain      = igt_data[, Win]/100,       # win amount divided by 100
  loss      = abs(igt_data[, Lose]/100)  # loss amount divided by 100 (absolute value needed)
)

## ========================================================================
# Model 1 (m1): Value plus Sequential Exploration  ------------------------

model_to_fit   <- model_VSE

if(file.exists(here::here('scripts', 'stan-files', paste(model_to_fit$stan_file_noext, '.exe', sep = "")))==T){
  file.remove(here::here('scripts', 'stan-files', paste(model_to_fit$stan_file_noext, '.exe', sep = "")))
}


## Pre-compile model
compiled_model <- cmdstan_model(
  stan_file       = here::here('scripts', 'stan-files', model_to_fit$stan_file),
  force_recompile = T
)

## Create containers
m1_est_theta    <- rep(NA, times = n_participants)
m1_est_gamma    <- rep(NA, times = n_participants)
m1_est_phi      <- rep(NA, times = n_participants)
m1_est_eta      <- rep(NA, times = n_participants)
m1_est_beta     <- rep(NA, times = n_participants)
m1_est_C        <- rep(NA, times = n_participants)

m1_est_theta_within_50ci  <- rep(NA, times = n_participants)
m1_est_theta_within_90ci  <- rep(NA, times = n_participants)
m1_est_gamma_within_50ci  <- rep(NA, times = n_participants)
m1_est_gamma_within_90ci  <- rep(NA, times = n_participants)
m1_est_phi_within_50ci    <- rep(NA, times = n_participants)
m1_est_phi_within_90ci    <- rep(NA, times = n_participants)
m1_est_eta_within_50ci    <- rep(NA, times = n_participants)
m1_est_eta_within_90ci    <- rep(NA, times = n_participants)
m1_est_beta_within_50ci   <- rep(NA, times = n_participants)
m1_est_beta_within_90ci   <- rep(NA, times = n_participants)
m1_est_C_within_50ci      <- rep(NA, times = n_participants)
m1_est_C_within_90ci      <- rep(NA, times = n_participants)

# Sampling
tic()
m1_fit <- compiled_model$sample(
  data            = stan_data,
  chains          = 4,
  parallel_chains = 4,
  refresh         = 100,
  iter_warmup     = 500,
  iter_sampling   = 1000,
  save_warmup     = FALSE
)
toc()
beepr::beep("fanfare")

# Save data and extract variables ----------------
## Save data
## Print and/or save samples
m1_fit$save_output_files(
  dir      = here::here("output"),
  basename = model_to_fit$model_name
)

## extract log-likelihood matrix
m1_log_likelihood <- read_cmdstan_csv(
  files               = m1_fit$output_files(),
  variables           = c("choice_log_lik"),
  sampler_diagnostics = NULL,
  format              = getOption("cmdstanr_draws_format", "draws_df")
)

## extract predicted choices
m1_choice_pred <- read_cmdstan_csv(
  files               = m1_fit$output_files(),
  variables           = c("choice_pred"),
  sampler_diagnostics = NULL,
  format              = getOption("cmdstanr_draws_format", "draws_df")
)

## get WAIC for model
m1_ll_samples <- as.matrix(
  m1_log_likelihood$post_warmup_draws[, 1:m1_log_likelihood$metadata$stan_variable_sizes$choice_log_lik,]
)
m1_model_WAIC <- loo::waic(m1_ll_samples)

## Extract parameter samples (m1_individual-level)
m1_indiv_par_samples_all <- read_cmdstan_csv(
  files=m1_fit$output_files(),
  variables = model_to_fit$indiv_pars,
  sampler_diagnostics = NULL,
  format = getOption("cmdstanr_draws_format", "draws_df")
)

m1_indiv_par_samples <- vector(mode="list",
                            length=length(model_to_fit$indiv_pars))


m1_indiv_par_est <- matrix(NA, nrow = m1_indiv_par_samples_all$metadata$stan_variable_sizes[[model_to_fit$indiv_pars[1]]],
                            ncol = length(model_to_fit$indiv_pars))
colnames(m1_indiv_par_est) <- model_to_fit$indiv_pars

### Plot distribution of participant parameters
for (i in 1:length(m1_indiv_par_samples)){
  m1_indiv_par_samples[[i]] <-
    as.matrix(m1_indiv_par_samples_all$post_warmup_draws[seq(
      from       = 1 + (i-1) * dim(m1_indiv_par_est)[1],
      to         = i * dim(m1_indiv_par_est)[1],
      length.out = dim(m1_indiv_par_est)[1])
    ])
  m1_indiv_par_est[,i] <- apply(m1_indiv_par_samples[[i]], MARGIN=2, FUN=median)
  
  hist(m1_indiv_par_est[,i], main=model_to_fit$indiv_pars[i], 30)
}
  
## Code to get beta sample distribution for e.g., participant no. 11
pt_id <- "20"
pt_ix <- match(pt_id, igt_data$stan_index %>% unique())
param <- match("beta", model_VSE$indiv_pars)  
hist(m1_indiv_par_samples[[param]][, pt_ix], 30, main= paste("beta weight Samples for", pt_id))

## Record median parameter values for each participant
for (pt_ix in 1:length(unique(igt_data$stan_index))){
  m1_est_theta[pt_ix] <- m1_indiv_par_samples[[1]][,pt_ix] %>% median()
  m1_est_gamma[pt_ix] <- m1_indiv_par_samples[[2]][,pt_ix] %>% median()
  m1_est_phi[pt_ix]   <- m1_indiv_par_samples[[3]][,pt_ix] %>% median()
  m1_est_eta[pt_ix]   <- m1_indiv_par_samples[[4]][,pt_ix] %>% median()
  m1_est_beta[pt_ix]  <- m1_indiv_par_samples[[5]][,pt_ix] %>% median()
  m1_est_C[pt_ix]     <- m1_indiv_par_samples[[6]][,pt_ix] %>% median()
  
  m1_est_theta_within_50ci[pt_ix] <- m1_est_theta[pt_ix] > quantile(m1_indiv_par_samples[[1]], 0.25) & m1_est_theta[pt_ix] < quantile(m1_indiv_par_samples[[1]], 0.75)
  m1_est_theta_within_90ci[pt_ix] <- m1_est_theta[pt_ix] > quantile(m1_indiv_par_samples[[1]], 0.05) & m1_est_theta[pt_ix] < quantile(m1_indiv_par_samples[[1]], 0.95)
  
  m1_est_gamma_within_50ci[pt_ix] <- m1_est_gamma[pt_ix] > quantile(m1_indiv_par_samples[[2]], 0.25) & m1_est_gamma[pt_ix] < quantile(m1_indiv_par_samples[[2]], 0.75)
  m1_est_gamma_within_90ci[pt_ix] <- m1_est_gamma[pt_ix] > quantile(m1_indiv_par_samples[[2]], 0.05) & m1_est_gamma[pt_ix] < quantile(m1_indiv_par_samples[[2]], 0.95)

  m1_est_phi_within_50ci[pt_ix] <- m1_est_phi[pt_ix] > quantile(m1_indiv_par_samples[[3]], 0.25) & m1_est_phi[pt_ix] < quantile(m1_indiv_par_samples[[3]], 0.75)
  m1_est_phi_within_90ci[pt_ix] <- m1_est_phi[pt_ix] > quantile(m1_indiv_par_samples[[3]], 0.05) & m1_est_phi[pt_ix] < quantile(m1_indiv_par_samples[[3]], 0.95)
  
  m1_est_eta_within_50ci[pt_ix] <- m1_est_eta[pt_ix] > quantile(m1_indiv_par_samples[[4]], 0.25) & m1_est_eta[pt_ix] < quantile(m1_indiv_par_samples[[4]], 0.75)
  m1_est_eta_within_90ci[pt_ix] <- m1_est_eta[pt_ix] > quantile(m1_indiv_par_samples[[4]], 0.05) & m1_est_eta[pt_ix] < quantile(m1_indiv_par_samples[[4]], 0.95)
  
  m1_est_beta_within_50ci[pt_ix] <- m1_est_beta[pt_ix] > quantile(m1_indiv_par_samples[[5]], 0.25) & m1_est_beta[pt_ix] < quantile(m1_indiv_par_samples[[5]], 0.75)
  m1_est_beta_within_90ci[pt_ix] <- m1_est_beta[pt_ix] > quantile(m1_indiv_par_samples[[5]], 0.05) & m1_est_beta[pt_ix] < quantile(m1_indiv_par_samples[[5]], 0.95)

  m1_est_C_within_50ci[pt_ix] <- m1_est_C[pt_ix] > quantile(m1_indiv_par_samples[[6]], 0.25) & m1_est_C[pt_ix] < quantile(m1_indiv_par_samples[[6]], 0.75)
  m1_est_C_within_90ci[pt_ix] <- m1_est_C[pt_ix] > quantile(m1_indiv_par_samples[[6]], 0.05) & m1_est_C[pt_ix] < quantile(m1_indiv_par_samples[[6]], 0.95)
}


# check calibration
mean(m1_est_theta_within_50ci); mean(m1_est_theta_within_90ci)
mean(m1_est_gamma_within_50ci); mean(m1_est_gamma_within_90ci)
mean(m1_est_phi_within_50ci); mean(m1_est_phi_within_90ci)
mean(m1_est_eta_within_50ci); mean(m1_est_eta_within_90ci)
mean(m1_est_beta_within_50ci); mean(m1_est_beta_within_90ci)
mean(m1_est_C_within_50ci); mean(m1_est_C_within_90ci)

# cor.test(all_w_prior, m1_est_w_prior, method="spearman")
# cor.test(all_w_evidence, m1_est_w_evidence, method="spearman")
# cor.test(all_beta, m1_est_beta, method="spearman")

## Plot estimated vs actual
# plot(all_beta, m1_est_beta, xlim=c(0,30), ylim=c(0,40))

for (i in unique(igt_data$stan_index)){
  igt_data[stan_index==i, VSE_theta:=m1_est_theta[i]]
  igt_data[stan_index==i, VSE_gamma:=m1_est_gamma[i]]
  igt_data[stan_index==i, VSE_phi:=m1_est_phi[i]]
  igt_data[stan_index==i, VSE_eta:=m1_est_eta[i]]
  igt_data[stan_index==i, VSE_beta:=m1_est_beta[i]]
  igt_data[stan_index==i, VSE_C:=m1_est_C[i]]
}

hist(igt_data$VSE_phi %>% unique(), breaks= 100)
igt_data.pars <- distinct(igt_data, PtID, session, drug, .keep_all = T)


## ========================================================================
# Model 2 (m2) Prospect Valence Learning - Delta ---------------------------------------

model_to_fit   <- model_PVLD

if(file.exists(here::here('scripts', 'stan-files', paste(model_to_fit$stan_file_noext, '.exe', sep = "")))==T){
  file.remove(here::here('scripts', 'stan-files', paste(model_to_fit$stan_file_noext, '.exe', sep = "")))
}


## Pre-compile model
compiled_model <- cmdstan_model(
  stan_file       = here::here('scripts', 'stan-files', model_to_fit$stan_file),
  force_recompile = T
)

## Create containers

## Create containers
m2_est_rho      <- rep(NA, times = n_participants)
m2_est_lambda   <- rep(NA, times = n_participants)
m2_est_eta      <- rep(NA, times = n_participants)
m2_est_beta     <- rep(NA, times = n_participants)
m2_est_C        <- rep(NA, times = n_participants)

m2_est_rho_within_50ci  <- rep(NA, times = n_participants)
m2_est_rho_within_90ci  <- rep(NA, times = n_participants)
m2_est_lambda_within_50ci  <- rep(NA, times = n_participants)
m2_est_lambda_within_90ci  <- rep(NA, times = n_participants)
m2_est_eta_within_50ci    <- rep(NA, times = n_participants)
m2_est_eta_within_90ci    <- rep(NA, times = n_participants)
m2_est_beta_within_50ci   <- rep(NA, times = n_participants)
m2_est_beta_within_90ci   <- rep(NA, times = n_participants)
m2_est_C_within_50ci      <- rep(NA, times = n_participants)
m2_est_C_within_90ci      <- rep(NA, times = n_participants)


# Sampling
tic()
m2_fit <- compiled_model$sample(
  data            = stan_data,
  chains          = 4,
  parallel_chains = 4,
  refresh         = 100,
  iter_warmup     = 500,
  iter_sampling   = 1000,
  save_warmup     = FALSE
)
toc()
beepr::beep("coin")

# Save data and extract variables ----------------
## Save data
## Print and/or save samples
m2_fit$save_output_files(
  dir      = here::here("output"),
  basename = model_to_fit$model_name
)

## extract log-likelihood matrix
m2_log_likelihood <- read_cmdstan_csv(
  files               = m2_fit$output_files(),
  variables           = c("choice_log_lik"),
  sampler_diagnostics = NULL,
  format              = getOption("cmdstanr_draws_format", "draws_df")
)

## extract predicted choices
m2_choice_pred <- read_cmdstan_csv(
  files               = m2_fit$output_files(),
  variables           = c("choice_pred"),
  sampler_diagnostics = NULL,
  format              = getOption("cmdstanr_draws_format", "draws_df")
)

## get WAIC for model
m2_ll_samples <- as.matrix(
  m2_log_likelihood$post_warmup_draws[, 1:m2_log_likelihood$metadata$stan_variable_sizes$choice_log_lik,]
)
m2_model_WAIC <- loo::waic(m2_ll_samples)

## Extract parameter samples (m2_individual-level)
m2_indiv_par_samples_all <- read_cmdstan_csv(
  files=m2_fit$output_files(),
  variables = model_to_fit$indiv_pars,
  sampler_diagnostics = NULL,
  format = getOption("cmdstanr_draws_format", "draws_df")
)

m2_indiv_par_samples <- vector(mode="list",
                               length=length(model_to_fit$indiv_pars))


m2_indiv_par_est <- matrix(NA, nrow = m2_indiv_par_samples_all$metadata$stan_variable_sizes[[model_to_fit$indiv_pars[1]]],
                           ncol = length(model_to_fit$indiv_pars))
colnames(m2_indiv_par_est) <- model_to_fit$indiv_pars

### Plot distribution of participant parameters
for (i in 1:length(m2_indiv_par_samples)){
  m2_indiv_par_samples[[i]] <-
    as.matrix(m2_indiv_par_samples_all$post_warmup_draws[seq(
      from       = 1 + (i-1) * dim(m2_indiv_par_est)[1],
      to         = i * dim(m2_indiv_par_est)[1],
      length.out = dim(m2_indiv_par_est)[1])
    ])
  m2_indiv_par_est[,i] <- apply(m2_indiv_par_samples[[i]], MARGIN=2, FUN=median)
  
  hist(m2_indiv_par_est[,i], main=model_to_fit$indiv_pars[i], 30)
}

## Code to get beta sample distribution for e.g., participant no. 11
pt_id <- "20"
pt_ix <- match(pt_id, igt_data$stan_index %>% unique())
param <- match("beta", model_PVLD$indiv_pars)  
hist(m2_indiv_par_samples[[param]][, pt_ix], 30, main= paste("beta weight Samples for", pt_id))

## Record median parameter values for each participant
for (pt_ix in 1:length(unique(igt_data$stan_index))){
  m2_est_rho[pt_ix] <- m2_indiv_par_samples[[1]][,pt_ix] %>% median()
  m2_est_lambda[pt_ix] <- m2_indiv_par_samples[[2]][,pt_ix] %>% median()
  m2_est_eta[pt_ix]   <- m2_indiv_par_samples[[3]][,pt_ix] %>% median()
  m2_est_beta[pt_ix]  <- m2_indiv_par_samples[[4]][,pt_ix] %>% median()
  m2_est_C[pt_ix]     <- m2_indiv_par_samples[[5]][,pt_ix] %>% median()
  
  m2_est_rho_within_50ci[pt_ix] <- m2_est_rho[pt_ix] > quantile(m2_indiv_par_samples[[1]], 0.25) & m2_est_rho[pt_ix] < quantile(m2_indiv_par_samples[[1]], 0.75)
  m2_est_rho_within_90ci[pt_ix] <- m2_est_rho[pt_ix] > quantile(m2_indiv_par_samples[[1]], 0.05) & m2_est_rho[pt_ix] < quantile(m2_indiv_par_samples[[1]], 0.95)
  
  m2_est_lambda_within_50ci[pt_ix] <- m2_est_lambda[pt_ix] > quantile(m2_indiv_par_samples[[2]], 0.25) & m2_est_lambda[pt_ix] < quantile(m2_indiv_par_samples[[2]], 0.75)
  m2_est_lambda_within_90ci[pt_ix] <- m2_est_lambda[pt_ix] > quantile(m2_indiv_par_samples[[2]], 0.05) & m2_est_lambda[pt_ix] < quantile(m2_indiv_par_samples[[2]], 0.95)
  
  m2_est_eta_within_50ci[pt_ix] <- m2_est_eta[pt_ix] > quantile(m2_indiv_par_samples[[3]], 0.25) & m2_est_eta[pt_ix] < quantile(m2_indiv_par_samples[[3]], 0.75)
  m2_est_eta_within_90ci[pt_ix] <- m2_est_eta[pt_ix] > quantile(m2_indiv_par_samples[[3]], 0.05) & m2_est_eta[pt_ix] < quantile(m2_indiv_par_samples[[3]], 0.95)
  
  m2_est_beta_within_50ci[pt_ix] <- m2_est_beta[pt_ix] > quantile(m2_indiv_par_samples[[4]], 0.25) & m2_est_beta[pt_ix] < quantile(m2_indiv_par_samples[[4]], 0.75)
  m2_est_beta_within_90ci[pt_ix] <- m2_est_beta[pt_ix] > quantile(m2_indiv_par_samples[[4]], 0.05) & m2_est_beta[pt_ix] < quantile(m2_indiv_par_samples[[4]], 0.95)
  
  m2_est_C_within_50ci[pt_ix] <- m2_est_C[pt_ix] > quantile(m2_indiv_par_samples[[5]], 0.25) & m2_est_C[pt_ix] < quantile(m2_indiv_par_samples[[5]], 0.75)
  m2_est_C_within_90ci[pt_ix] <- m2_est_C[pt_ix] > quantile(m2_indiv_par_samples[[5]], 0.05) & m2_est_C[pt_ix] < quantile(m2_indiv_par_samples[[5]], 0.95)
}


# check calibration
mean(m2_est_rho_within_50ci); mean(m2_est_rho_within_90ci)
mean(m2_est_lambda_within_50ci); mean(m2_est_lambda_within_90ci)
mean(m2_est_eta_within_50ci); mean(m2_est_eta_within_90ci)
mean(m2_est_beta_within_50ci); mean(m2_est_beta_within_90ci)
mean(m2_est_C_within_50ci); mean(m2_est_C_within_90ci)


for (i in unique(igt_data$stan_index)){
  igt_data[stan_index==i, PVLD_rho:=m2_est_rho[i]]
  igt_data[stan_index==i, PVLD_lambda:=m2_est_lambda[i]]
  igt_data[stan_index==i, PVLD_eta:=m2_est_eta[i]]
  igt_data[stan_index==i, PVLD_beta:=m2_est_beta[i]]
  igt_data[stan_index==i, PVLD_C:=m2_est_C[i]]
}

hist(igt_data$PVLD_rho %>% unique(), breaks= 100)
hist(igt_data$PVLD_lambda %>% unique(), breaks= 100)
hist(igt_data$PVLD_eta %>% unique(), breaks= 100)
hist(igt_data$PVLD_beta %>% unique(), breaks= 100)
hist(igt_data$PVLD_C %>% unique(), breaks= 100)

# Model WAIC Comparison ---------------------------------------------------

## Put all model WAIC objects in a list and compare
model_waics <- list(m1_model_WAIC, m2_model_WAIC)
loo::loo_compare(model_waics)

# se_diff is the estimated standard error of the difference btw models

