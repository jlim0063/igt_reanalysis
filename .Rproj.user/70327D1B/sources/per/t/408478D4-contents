# Load required packages
require(ggplot2)
require(ggsignif)
require(hrbrthemes)
require(plotrix)
require(data.table)
require(extrafont)
require(colorspace)
require(ggbeeswarm)
require(gghighlight)

# Load extra fonts and color palettes
loadfonts()

# Read csv with trial-level data
load(here::here("data", "actual", "Killgore2007_GUM4", "Killgore2007_GUM4_merged.Rdata"))

# Read csv with modelled parameter data
igt_data.pars <- as.data.table(read.csv(here::here("data/actual/Killgore2007_GUM4", "Killgore2007_GUM4_with_parameters.csv")))
igt_data.pars$session <- factor(igt_data.pars$session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))
igt_data.pars$drug    <- as.factor(igt_data.pars$drug)

## Default text formatting and color palette for graphs
default_text       <- element_text(size = 13, family = "Averia Serif Libre Light")
default_text.title <- element_text(size = 15, family = "Averia Serif Libre", face = "bold")
color_palette <- c("#E2E2E2","#008DCB", "#D33F6A")


# CHOICE PATTERN PLOTS ----------------------------------------------------

pt_ix <- sample(unique(igt_data$PtID), size = 1)
sesh_ix <- sample(unique(igt_data[PtID==pt_ix]$session), size = 1)

## Subset participant's trial data
pt_subset1 <- igt_data[PtID==81 & session== 1]
pt_subset2 <- igt_data[PtID==22 & session == 3]
pt_subset <- rbind(pt_subset1, pt_subset2)

x_axis_breaks <- c(1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

exp_choice_patterns <- ggplot(data = pt_subset, aes(x = Trial, y = choice)) +
  facet_grid(rows = vars(PtID), 
             labeller = labeller(PtID = c(`22` = "Explorative\n (Subject 22, Session 3)", `81` = "Exploitative\n (Subject 81, Session 1)"))) +
  geom_line(alpha =.2, linewidth = .8) + geom_point(size = 2,  aes(color = factor(choice))) + 
  ggpubr::theme_pubr()+
  scale_x_continuous(breaks = x_axis_breaks) + 
  scale_fill_manual(values=c( "#9999CC", "#999999", "red", "green"))+
  guides(color = "none") + 
  labs( x = "Trial", y = "Choice") +
  theme( 
        panel.spacing = unit(2.4, "lines"),
        title = default_text.title, 
        axis.title.x =default_text, 
        axis.title.y =default_text,
        strip.text.y = element_text(size = 14, family = "Averia Serif Libre Light")) 



# Parameter value boxplots (w/o interactions) -----------------------------

plot.VSE.theta <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_theta, fill = session)) +
  geom_boxplot(width = .5, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = .25), size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr()+ 
  guides(fill = "none") + ylim(c(0, 1)) + 
  labs(title = "Value Sensitivity", x = "Session", y = "θ", fill = "Session") + 
  theme(title = default_text.title,
        axis.title.x = default_text,
        axis.title.y = element_text(size = 16, family = "serif")
        ) +
  ### Add significant markers between Baseline and 75h TSD
  geom_signif(
    comparisons = list(c("Baseline", "75h TSD"), c("51h TSD", "75h TSD")), 
    y_position = c(.95, .90), 
    annotations = rep("***", 2),
    tip_length = .01
    ) 

plot.VSE.gamma <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_gamma, fill = session)) +
  geom_boxplot(width = .5, outlier.shape = NA) + 
  geom_point(position = position_jitterdodge(jitter.width = .25), size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr()+ 
  guides(fill = "none") + ylim(c(0, 1)) + 
  labs(title = "Decay Rate", x = "Session", y = "γ", fill = "Session")+
  theme(title = default_text.title,
        axis.title.x = default_text,
        axis.title.y = element_text(size = 16, family = "serif")
  ) 

plot.VSE.phi <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_phi, fill = session)) +
  geom_hline(yintercept = 0, linetype = "dashed", alpha = .5) + 
  geom_boxplot(width = .5, outlier.shape = NA) + 
  geom_point(position = position_jitterdodge(jitter.width = .25), size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr()+ 
  guides(fill = "none") + ylim(c(-3,3)) + 
  labs(title = "Exploration Bonus", x = "Session", y = "φ", fill = "Session")+
  theme(title = default_text.title,
        axis.title.x = default_text,
        axis.title.y = element_text(size = 16, family = "serif")
  ) 

plot.VSE.eta <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_eta, fill = session)) +
  geom_boxplot(width = .5, outlier.shape = NA) + 
  geom_point(position = position_jitterdodge(jitter.width = .25), size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr()+ 
  guides(fill = "none") + ylim(c(0, 1)) + 
  labs(title = "Exploration Update", x = "Session", y = "η", fill = "Session")+
  theme(title = default_text.title,
        axis.title.x = default_text,
        axis.title.y = element_text(size = 16, family = "serif")
  ) 

plot.VSE.C <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_C, fill = session)) +
  geom_boxplot(width = .5, outlier.shape = NA) + 
  geom_point(position = position_jitterdodge(jitter.width = .25), size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr()+ 
  guides(fill = "none") + 
  labs(title = "Consistency", x = "Session", y = "C", fill = "Session")+
  ylim(c(0, 2.15)) + 
  theme(title =  default_text.title,
        axis.title.x = default_text, 
        axis.title.y = default_text) +
  ### Add significant markers between Baseline and 75h TSD
  geom_signif(
    comparisons = list(c("Baseline", "75h TSD"), c("Baseline", "51h TSD")), 
    y_position = c(2, 1.9), 
    annotations = c("***", "**"),
    tip_length = .01
    )

ggpubr::ggarrange(plot.VSE.theta, plot.VSE.gamma, plot.VSE.phi, plot.VSE.eta, plot.VSE.C, ncol = 3, nrow = 2)


# Line charts -------------------------------------------------------------

## Create variable to indicate whether Pt is above or below baseline median for Theta.
BL_theta_median <-median(igt_data.pars[session=="Baseline"]$VSE_theta)
for (id_x in unique(igt_data.pars$PtID)){
  if (igt_data.pars[PtID == id_x & session == "Baseline"]$VSE_theta > BL_theta_median){
    igt_data.pars[PtID == id_x, BL_theta := "high"]
  } else if (igt_data.pars[PtID == id_x & session == "Baseline"]$VSE_theta <= BL_theta_median){
    igt_data.pars[PtID == id_x, BL_theta := "low"]
  }
}

## Linechart of block 5 score 
plot.lc.b5 <- ggplot(data = igt_data.pars[!is.na(BL_theta)], aes(x = factor(session), y = b5.score)) +
  geom_line(aes(group = PtID, color = factor(BL_theta)), linewidth = .8) + 
  geom_point(aes(color = factor(BL_theta), shape = factor(BL_theta)), size = 2, alpha = 1) +
  scale_fill_manual(values = color_palette) + 
  scale_shape_manual(values = c(15, 19)) + 
  ggpubr::theme_pubr() + 
  guides(color = "none") +
  labs(x = "Session") + 
  guides(shape = "none")

## Linechart of Value Sensitivity, PtID used for line color grouping, showing high/low baseline value (median split)
plot.lc.theta <- ggplot(data = igt_data.pars[!is.na(BL_theta)], aes(x = factor(session), y = VSE_theta)) +
  geom_hline(yintercept = BL_theta_median, linetype = "dashed", alpha = .7) + 
  geom_line(aes(group = PtID, color = factor(BL_theta)), linewidth = .6) + 
  geom_point(aes(color = factor(BL_theta), shape = factor(BL_theta)), size = 2, alpha = 1) +
  scale_fill_manual(values = color_palette) + 
  scale_shape_manual(values = c(15, 19)) + 
  ggpubr::theme_pubr() + 
  guides(color = "none") + scale_y_continuous(name = "θ", limits = 0:1, breaks = seq(0, 1, by = .1)) + 
  labs(x = "Session") + 
  annotate(x=.7, y = .365, geom = 'text', label = 'Baseline Median θ \n =.403', size = 3.5)+
  guides(shape = "none")


## Linechart of gamma
plot.lc.gamma <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_gamma, group = session)) +
  geom_line(aes(group = factor(PtID), color = factor(PtID))) + 
  geom_point(size = 1.5, alpha = .8) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr() + 
  guides(color = "none") 

## Linechart of phi
plot.lc.phi <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_phi, group = session)) +
  geom_line(aes(group = factor(PtID), color = factor(PtID))) + 
  geom_point(size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr() + 
  guides(color = "none") 

## Linechart of eta
plot.lc.eta <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_eta, group = session)) +
  geom_line(aes(group = factor(PtID), color = factor(PtID))) + 
  geom_point(size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr() + 
  guides(color = "none") 

## Linechart of Consistency
plot.lc.C <- ggplot(data = igt_data.pars, aes(x = session, y = VSE_C, group = session)) +
  geom_line(aes(group = factor(PtID), color = factor(PtID))) + 
  geom_point(size = 1.5, alpha = .4) +
  scale_fill_manual(values = color_palette) + 
  ggpubr::theme_pubr() + 
  guides(color = "none") 

ggpubr::ggarrange(plot.lc.theta, plot.lc.gamma, plot.lc.phi, plot.lc.eta, plot.lc.C, nrow = 5)

# SE Index ----------------------------------------------------------------

n_sessions <- unique(igt_data$stan_index) %>% length

## Create SE marker for each participant
trial_data[, seq_exp := as.integer()]

for (i in 1:n_sessions){
  ## isolate session data
  temp <- igt_data[stan_index == i]
  n_trials <- max(temp$Trial)
    ## trial level loop
  for (j in 1:n_trials){
    if (j == 1){
      next
    } else if (j %in% 2:3){
      ## record previous 1 to 3 trial responses
      se_marker <- ifelse(length(unique(temp[1:j]$choice)) == j, 1, 0)
    } else {
      ## record previous 4 trial responses
      se_marker <- ifelse(length(unique(temp[(j-3):j]$choice)) == 4, 1, 0)
    }
    
    ## write to temp datatable
    igt_data[stan_index == i & Trial == j, "seq_exp"] <- se_marker
  }
}

# Create data table of mean seq_exp (thus, an SE index across trials) by averaging across trial number
se.table <- igt_data[, .(mean(seq_exp), std.error(seq_exp)), by = Trial]
names(se.table) <- c("trial_no",  "SE_index", "SE_index_stderr")
se.table[, upper_CI := SE_index + (1.96*SE_index_stderr)]
se.table[, lower_CI := SE_index - (1.96*SE_index_stderr)]

## Make sure there are no values less than 0 for lower CI
se.table[, lower_CI := ifelse(lower_CI<0, .000001, lower_CI)]

# Plot SE index across trials
se_index_chart <- ggplot(data = se.table, aes(x = trial_no, y = SE_index)) + 
  geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI), fill = color_palette[3], alpha = .15) + 
  geom_path(color = color_palette[3], linewidth = .8, lineend = "round") + 
  labs(title = "SE index", x = "Trial", y = "SE index")  +   
  scale_x_continuous(limits = c(1, 100), n.breaks = 20) + 
  scale_y_continuous(limits = c(0, .9), n.breaks = 10) +
  geom_hline(yintercept = .06, linetype = "dashed") +
  # facet_grid( rows = vars(session)) +
  ggpubr::theme_pubr() +
  theme(aspect.ratio = .35,
        plot.title   = default_text.title,
        axis.title.x = default_text,
        axis.title.y = default_text)




# Plot posterior predictive check (VSE) ---------------------------------------------

## Define mode helper function
getmode <- function(v) {
  uniqv <- unique(v)
  m <- uniqv[which.max(tabulate(match(v, uniqv)))]
  return(m)
}

choice_pred <- c(); alt_pred <- c()
for (x in 1:7720){
  choice_vec <- m1_choice_pred$post_warmup_draws[[x]]
  choice_pred_x <- getmode(choice_vec)
  choice_pred <- c(choice_pred, choice_pred_x)
}

igt_data[,VSE_choice_pred:=choice_pred]
# igt_data[,VSE_choice_pred.alt :=alt_pred]
igt_data[,VSE_pred_correct:=ifelse(VSE_choice_pred==choice, 1, 0)]
# igt_data[,VSE_pred_correct:=ifelse(VSE_pred_correct == 1, 1, ifelse( VSE_choice_pred.alt==choice, 1, 0))]


VSE_choice_tally <- igt_data[, .(mean(VSE_pred_correct), std.error(VSE_pred_correct)), by = c("PtID", "session")]
names(VSE_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
VSE_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
VSE_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
VSE_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]

## Plot model accuracy for baseline session
ggplot(VSE_choice_tally[session==3], aes(x = prob_correct*100, y = factor(PtID))) + 
  geom_vline(xintercept = 25, linetype = "dashed", alpha = .7) +
  geom_errorbar(aes(color = prob_correct, xmin = lower.CI*100, xmax = upper.CI*100), size = .8) + 
  geom_point(aes(color = prob_correct), size = 3) + 
  scale_color_gradient(  low = "#0f4200", high = "#00cc70",) + 
  labs(y= "Subject ID") + guides(color = "none") + 
  scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,100), breaks = seq(0, 100, by = 10)) + 
  hrbrthemes::theme_ipsum() +
  theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
  gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))

## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(VSE_choice_tally[session == "Baseline", prob_correct])
s1_CI <- VSE_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(VSE_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- VSE_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(VSE_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- VSE_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96

VSE_choice_tally[session == "Baseline",session_upper_CI:= s1_mean+s1_CI]
VSE_choice_tally[session == "Baseline",session_lower_CI:= s1_mean-s1_CI]
VSE_choice_tally[session == "51h TSD",session_upper_CI:= s2_mean+s2_CI]
VSE_choice_tally[session == "51h TSD",session_lower_CI:= s2_mean-s2_CI]
VSE_choice_tally[session == "75h TSD",session_upper_CI:= s3_mean+s3_CI]
VSE_choice_tally[session == "75h TSD",session_lower_CI:= s3_mean-s3_CI]


VSE.plot.predict <- ggplot(VSE_choice_tally, aes(x = session, y = prob_correct, fill = session)) + 
  geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
  # geom_boxplot(width = .5, outlier.shape = NA) + 
  geom_quasirandom(width = .2, alpha = .2) +
  geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
  stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) + 
  scale_y_continuous(limits = c(0, 1))+
  guides(fill = "none") + 
  # scale_color_manual(values = color_palette)+ 
  ggpubr::theme_pubr() +
  labs(x = "Session", y = "Proportion of correct predictions", title = "Value plus Sequential Exploration") + 
  theme(aspect.ratio = 1.2,
        title =  element_text(size = 12, family = "Averia Serif Libre Light"),
        axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"), 
        axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))


# Plot posterior predictive check (PVL-D) -------------------------------------------

choice_pred <- c()
for (x in 1:7720){
  choice_vec <- m2_choice_pred$post_warmup_draws[[x]]
  choice_pred_x <- getmode(choice_vec)
  choice_pred <- c(choice_pred, choice_pred_x)
}

igt_data[,PVLD_choice_pred:=choice_pred]
# igt_data[,PVLD_choice_pred.alt :=alt_pred]
igt_data[,PVLD_pred_correct:=ifelse(PVLD_choice_pred==choice, 1, 0)]
# igt_data[,PVLD_pred_correct:=ifelse(PVLD_pred_correct == 1, 1, ifelse( PVLD_choice_pred.alt==choice, 1, 0))]

PVLD_choice_tally <- igt_data[, .(mean(PVLD_pred_correct), std.error(PVLD_pred_correct)), by = c("PtID", "session")]
names(PVLD_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
PVLD_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
PVLD_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
PVLD_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]

## Plot model accuracy for baseline session
ggplot(PVLD_choice_tally[session=="Baseline"], aes(x = prob_correct, y = factor(PtID))) + 
  geom_vline(xintercept = .25, linetype = "dashed", alpha = .7) +
  geom_errorbar(aes(color = prob_correct, xmin = lower.CI, xmax = upper.CI), size = .8) + 
  geom_point(aes(color = prob_correct), size = 3) + 
  scale_color_gradient(  low = "#0f4200", high = "#00cc70",) + 
  labs(y= "Subject ID") + guides(color = "none") + 
  scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,1), breaks = seq(0, 1, by = .10)) + 
  hrbrthemes::theme_ipsum() +
  theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
  gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))

## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(PVLD_choice_tally[session == "Baseline", prob_correct])
s1_CI <- PVLD_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(PVLD_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- PVLD_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(PVLD_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- PVLD_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96

PVLD_choice_tally[session == "Baseline",session_upper_CI:= s1_mean+s1_CI]
PVLD_choice_tally[session == "Baseline",session_lower_CI:= s1_mean-s1_CI]
PVLD_choice_tally[session == "51h TSD",session_upper_CI:= s2_mean+s2_CI]
PVLD_choice_tally[session == "51h TSD",session_lower_CI:= s2_mean-s2_CI]
PVLD_choice_tally[session == "75h TSD",session_upper_CI:= s3_mean+s3_CI]
PVLD_choice_tally[session == "75h TSD",session_lower_CI:= s3_mean-s3_CI]

PVLD.plot.predict <- ggplot(PVLD_choice_tally, aes(x = session, y = prob_correct, fill = session)) + 
  geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
  # geom_boxplot(width = .5, outlier.shape = NA) + 
  geom_quasirandom(width = .2, alpha = .2) +
  geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
  stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) + 
  scale_y_continuous(limits = c(0, 1))+
  guides(fill = "none") + 
  # scale_color_manual(values = color_palette)+ 
  ggpubr::theme_pubr() +
  labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") + 
  theme(aspect.ratio = 1.2,
        title =  element_text(size = 12, family = "Averia Serif Libre Light"),
        axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"), 
        axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))


# Arrange post predict plots side by side ---------------------------------

ggpubr::ggarrange(PVLD.plot.predict, VSE.plot.predict, ncol = 2)
