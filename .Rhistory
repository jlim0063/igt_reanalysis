labs(y= "Subject ID") + guides(color = "none") +
scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,100), breaks = seq(0, 100, by = 10)) +
hrbrthemes::theme_ipsum() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(model_choice_tally[session == 1, prob_correct])
s1_CI <- model_choice_tally[session == 1, prob_correct] %>% std.error() * 1.96
s2_mean <- mean(model_choice_tally[session == 2, prob_correct])
s2_CI <- model_choice_tally[session == 2, prob_correct] %>% std.error() * 1.96
s3_mean <- mean(model_choice_tally[session == 3, prob_correct])
s3_CI <- model_choice_tally[session == 3, prob_correct] %>% std.error() * 1.96
model_choice_tally[session == 1,session_upper_CI:= s1_mean+s1_CI]
model_choice_tally[session == 1,session_lower_CI:= s1_mean-s1_CI]
model_choice_tally[session == 2,session_upper_CI:= s2_mean+s2_CI]
model_choice_tally[session == 2,session_lower_CI:= s2_mean-s2_CI]
model_choice_tally[session == 3,session_upper_CI:= s3_mean+s3_CI]
model_choice_tally[session == 3,session_lower_CI:= s3_mean-s3_CI]
VSE.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Value plus Sequential Exploration") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
# Plot posterior predictive check (PVL-D) -------------------------------------------
choice_pred <- c()
for (x in 1:7720){
choice_vec <- m2_choice_pred$post_warmup_draws[[x]]
choice_pred_x <- getmode(choice_vec)
choice_pred <- c(choice_pred, choice_pred_x)
}
igt_data[,PVLD_choice_pred:=choice_pred]
# igt_data[,PVLD_choice_pred.alt :=alt_pred]
igt_data[,PVLD_pred_correct:=ifelse(PVLD_choice_pred==choice, 1, 0)]
# igt_data[,PVLD_pred_correct:=ifelse(PVLD_pred_correct == 1, 1, ifelse( PVLD_choice_pred.alt==choice, 1, 0))]
model_choice_tally <- igt_data[, .(mean(PVLD_pred_correct), std.error(PVLD_pred_correct)), by = c("PtID", "session")]
names(model_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
model_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
model_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
model_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]
## Plot model accuracy for baseline session
ggplot(model_choice_tally[session=="Baseline"], aes(x = prob_correct, y = factor(PtID))) +
geom_vline(xintercept = .25, linetype = "dashed", alpha = .7) +
geom_errorbar(aes(color = prob_correct, xmin = lower.CI, xmax = upper.CI), size = .8) +
geom_point(aes(color = prob_correct), size = 3) +
scale_color_gradient(  low = "#0f4200", high = "#00cc70",) +
labs(y= "Subject ID") + guides(color = "none") +
scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,1), breaks = seq(0, 1, by = .10)) +
hrbrthemes::theme_ipsum() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(model_choice_tally[session == 1, prob_correct])
s1_CI <- model_choice_tally[session == 1, prob_correct] %>% std.error() * 1.96
s2_mean <- mean(model_choice_tally[session == 2, prob_correct])
s2_CI <- model_choice_tally[session == 2, prob_correct] %>% std.error() * 1.96
s3_mean <- mean(model_choice_tally[session == 3, prob_correct])
s3_CI <- model_choice_tally[session == 3, prob_correct] %>% std.error() * 1.96
model_choice_tally[session == 1,session_upper_CI:= s1_mean+s1_CI]
model_choice_tally[session == 1,session_lower_CI:= s1_mean-s1_CI]
model_choice_tally[session == 2,session_upper_CI:= s2_mean+s2_CI]
model_choice_tally[session == 2,session_lower_CI:= s2_mean-s2_CI]
model_choice_tally[session == 3,session_upper_CI:= s3_mean+s3_CI]
model_choice_tally[session == 3,session_lower_CI:= s3_mean-s3_CI]
PVLD.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
# Arrange post predict plots side by side ---------------------------------
ggpubr::ggarrange(VSE.plot.predict, PVLD.plot.predict, ncol = 2)
ggpubr::ggarrange(PVLD.plot.predict, VSE.plot.predict, ncol = 2)
PVLD.plot.predict
model_choice_tally
PVLD.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
PVLD.plot.predict
PVLD.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = -.5, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
PVLD.plot.predict
model_choice_tally
choice_pred <- c()
for (x in 1:7720){
choice_vec <- m2_choice_pred$post_warmup_draws[[x]]
choice_pred_x <- getmode(choice_vec)
choice_pred <- c(choice_pred, choice_pred_x)
}
igt_data[,PVLD_choice_pred:=choice_pred]
# igt_data[,PVLD_choice_pred.alt :=alt_pred]
igt_data[,PVLD_pred_correct:=ifelse(PVLD_choice_pred==choice, 1, 0)]
# igt_data[,PVLD_pred_correct:=ifelse(PVLD_pred_correct == 1, 1, ifelse( PVLD_choice_pred.alt==choice, 1, 0))]
model_choice_tally <- igt_data[, .(mean(PVLD_pred_correct), std.error(PVLD_pred_correct)), by = c("PtID", "session")]
names(model_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
model_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
model_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
model_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]
## Plot model accuracy for baseline session
ggplot(model_choice_tally[session=="Baseline"], aes(x = prob_correct, y = factor(PtID))) +
geom_vline(xintercept = .25, linetype = "dashed", alpha = .7) +
geom_errorbar(aes(color = prob_correct, xmin = lower.CI, xmax = upper.CI), size = .8) +
geom_point(aes(color = prob_correct), size = 3) +
scale_color_gradient(  low = "#0f4200", high = "#00cc70",) +
labs(y= "Subject ID") + guides(color = "none") +
scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,1), breaks = seq(0, 1, by = .10)) +
hrbrthemes::theme_ipsum() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(model_choice_tally[session == 1, prob_correct])
s1_CI <- model_choice_tally[session == 1, prob_correct] %>% std.error() * 1.96
s2_mean <- mean(model_choice_tally[session == 2, prob_correct])
s2_CI <- model_choice_tally[session == 2, prob_correct] %>% std.error() * 1.96
s3_mean <- mean(model_choice_tally[session == 3, prob_correct])
s3_CI <- model_choice_tally[session == 3, prob_correct] %>% std.error() * 1.96
model_choice_tally[session == 1,session_upper_CI:= s1_mean+s1_CI]
model_choice_tally[session == 1,session_lower_CI:= s1_mean-s1_CI]
model_choice_tally[session == 2,session_upper_CI:= s2_mean+s2_CI]
model_choice_tally[session == 2,session_lower_CI:= s2_mean-s2_CI]
model_choice_tally[session == 3,session_upper_CI:= s3_mean+s3_CI]
model_choice_tally[session == 3,session_lower_CI:= s3_mean-s3_CI]
model_choice_tally
s1_mean
s3_CI <- model_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96
s3_CI
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(model_choice_tally[session == "Baseline", prob_correct])
s1_CI <- model_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(model_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- model_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(model_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- model_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96
model_choice_tally[session == 1,session_upper_CI:= s1_mean+s1_CI]
model_choice_tally[session == 1,session_lower_CI:= s1_mean-s1_CI]
model_choice_tally[session == 2,session_upper_CI:= s2_mean+s2_CI]
model_choice_tally[session == 2,session_lower_CI:= s2_mean-s2_CI]
model_choice_tally[session == 3,session_upper_CI:= s3_mean+s3_CI]
model_choice_tally[session == 3,session_lower_CI:= s3_mean-s3_CI]
PVLD.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
PVLD.plot.predict
model_choice_tally[session == "Baseline",session_upper_CI:= s1_mean+s1_CI]
model_choice_tally[session == "Baseline",session_lower_CI:= s1_mean-s1_CI]
model_choice_tally[session == "51h TSD",session_upper_CI:= s2_mean+s2_CI]
model_choice_tally[session == "51h TSD",session_lower_CI:= s2_mean-s2_CI]
model_choice_tally[session == "75h TSD",session_upper_CI:= s3_mean+s3_CI]
model_choice_tally[session == "75h TSD",session_lower_CI:= s3_mean-s3_CI]
PVLD.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
PVLD.plot.predict
# Plot posterior predictive check (VSE) ---------------------------------------------
## Define mode helper function
getmode <- function(v) {
uniqv <- unique(v)
m <- uniqv[which.max(tabulate(match(v, uniqv)))]
return(m)
}
choice_pred <- c(); alt_pred <- c()
for (x in 1:7720){
choice_vec <- m1_choice_pred$post_warmup_draws[[x]]
choice_pred_x <- getmode(choice_vec)
choice_pred <- c(choice_pred, choice_pred_x)
}
igt_data[,VSE_choice_pred:=choice_pred]
# igt_data[,VSE_choice_pred.alt :=alt_pred]
igt_data[,VSE_pred_correct:=ifelse(VSE_choice_pred==choice, 1, 0)]
# igt_data[,VSE_pred_correct:=ifelse(VSE_pred_correct == 1, 1, ifelse( VSE_choice_pred.alt==choice, 1, 0))]
model_choice_tally <- igt_data[, .(mean(VSE_pred_correct), std.error(VSE_pred_correct)), by = c("PtID", "session")]
names(model_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
model_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
model_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
model_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]
## Plot model accuracy for baseline session
ggplot(model_choice_tally[session==3], aes(x = prob_correct*100, y = factor(PtID))) +
geom_vline(xintercept = 25, linetype = "dashed", alpha = .7) +
geom_errorbar(aes(color = prob_correct, xmin = lower.CI*100, xmax = upper.CI*100), size = .8) +
geom_point(aes(color = prob_correct), size = 3) +
scale_color_gradient(  low = "#0f4200", high = "#00cc70",) +
labs(y= "Subject ID") + guides(color = "none") +
scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,100), breaks = seq(0, 100, by = 10)) +
hrbrthemes::theme_ipsum() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(model_choice_tally[session == "Baseline", prob_correct])
s1_CI <- model_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(model_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- model_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(model_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- model_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96
model_choice_tally[session == "Baseline",session_upper_CI:= s1_mean+s1_CI]
model_choice_tally[session == "Baseline",session_lower_CI:= s1_mean-s1_CI]
model_choice_tally[session == "51h TSD",session_upper_CI:= s2_mean+s2_CI]
model_choice_tally[session == "51h TSD",session_lower_CI:= s2_mean-s2_CI]
model_choice_tally[session == "75h TSD",session_upper_CI:= s3_mean+s3_CI]
model_choice_tally[session == "75h TSD",session_lower_CI:= s3_mean-s3_CI]
VSE.plot.predict <- ggplot(model_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Value plus Sequential Exploration") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
VSE.plot.predict
ggpubr::ggarrange(PVLD.plot.predict, VSE.plot.predict, ncol = 2)
model_choice_tally
rm(model_choice_tally)
## Define mode helper function
getmode <- function(v) {
uniqv <- unique(v)
m <- uniqv[which.max(tabulate(match(v, uniqv)))]
return(m)
}
choice_pred <- c(); alt_pred <- c()
for (x in 1:7720){
choice_vec <- m1_choice_pred$post_warmup_draws[[x]]
choice_pred_x <- getmode(choice_vec)
choice_pred <- c(choice_pred, choice_pred_x)
}
igt_data[,VSE_choice_pred:=choice_pred]
# igt_data[,VSE_choice_pred.alt :=alt_pred]
igt_data[,VSE_pred_correct:=ifelse(VSE_choice_pred==choice, 1, 0)]
# igt_data[,VSE_pred_correct:=ifelse(VSE_pred_correct == 1, 1, ifelse( VSE_choice_pred.alt==choice, 1, 0))]
VSE_choice_tally <- igt_data[, .(mean(VSE_pred_correct), std.error(VSE_pred_correct)), by = c("PtID", "session")]
names(VSE_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
VSE_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
VSE_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
VSE_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]
## Plot model accuracy for baseline session
ggplot(VSE_choice_tally[session==3], aes(x = prob_correct*100, y = factor(PtID))) +
geom_vline(xintercept = 25, linetype = "dashed", alpha = .7) +
geom_errorbar(aes(color = prob_correct, xmin = lower.CI*100, xmax = upper.CI*100), size = .8) +
geom_point(aes(color = prob_correct), size = 3) +
scale_color_gradient(  low = "#0f4200", high = "#00cc70",) +
labs(y= "Subject ID") + guides(color = "none") +
scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,100), breaks = seq(0, 100, by = 10)) +
hrbrthemes::theme_ipsum() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(VSE_choice_tally[session == "Baseline", prob_correct])
s1_CI <- VSE_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(VSE_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- VSE_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(VSE_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- VSE_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96
VSE_choice_tally[session == "Baseline",session_upper_CI:= s1_mean+s1_CI]
VSE_choice_tally[session == "Baseline",session_lower_CI:= s1_mean-s1_CI]
VSE_choice_tally[session == "51h TSD",session_upper_CI:= s2_mean+s2_CI]
VSE_choice_tally[session == "51h TSD",session_lower_CI:= s2_mean-s2_CI]
VSE_choice_tally[session == "75h TSD",session_upper_CI:= s3_mean+s3_CI]
VSE_choice_tally[session == "75h TSD",session_lower_CI:= s3_mean-s3_CI]
VSE.plot.predict <- ggplot(VSE_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Value plus Sequential Exploration") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
# Plot posterior predictive check (PVL-D) -------------------------------------------
choice_pred <- c()
for (x in 1:7720){
choice_vec <- m2_choice_pred$post_warmup_draws[[x]]
choice_pred_x <- getmode(choice_vec)
choice_pred <- c(choice_pred, choice_pred_x)
}
igt_data[,PVLD_choice_pred:=choice_pred]
# igt_data[,PVLD_choice_pred.alt :=alt_pred]
igt_data[,PVLD_pred_correct:=ifelse(PVLD_choice_pred==choice, 1, 0)]
# igt_data[,PVLD_pred_correct:=ifelse(PVLD_pred_correct == 1, 1, ifelse( PVLD_choice_pred.alt==choice, 1, 0))]
PVLD_choice_tally <- igt_data[, .(mean(PVLD_pred_correct), std.error(PVLD_pred_correct)), by = c("PtID", "session")]
names(PVLD_choice_tally) <- c("PtID", "session", "prob_correct", "SE_prob_correct")
PVLD_choice_tally[,upper.CI := prob_correct + (1.96*SE_prob_correct)]
PVLD_choice_tally[,lower.CI := prob_correct - (1.96*SE_prob_correct)]
PVLD_choice_tally[,session:=factor(session, levels = c(1, 2, 3), labels = c("Baseline", "51h TSD", "75h TSD"))]
## Plot model accuracy for baseline session
ggplot(PVLD_choice_tally[session=="Baseline"], aes(x = prob_correct, y = factor(PtID))) +
geom_vline(xintercept = .25, linetype = "dashed", alpha = .7) +
geom_errorbar(aes(color = prob_correct, xmin = lower.CI, xmax = upper.CI), size = .8) +
geom_point(aes(color = prob_correct), size = 3) +
scale_color_gradient(  low = "#0f4200", high = "#00cc70",) +
labs(y= "Subject ID") + guides(color = "none") +
scale_x_continuous(name = "Chance of Correct Prediction (%)", limits = c(0,1), breaks = seq(0, 1, by = .10)) +
hrbrthemes::theme_ipsum() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20)) +
gghighlight(lower.CI > .25, unhighlighted_params = list(color = "gray"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(PVLD_choice_tally[session == "Baseline", prob_correct])
s1_CI <- PVLD_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(PVLD_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- PVLD_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(PVLD_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- PVLD_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96
PVLD_choice_tally[session == "Baseline",session_upper_CI:= s1_mean+s1_CI]
PVLD_choice_tally[session == "Baseline",session_lower_CI:= s1_mean-s1_CI]
PVLD_choice_tally[session == "51h TSD",session_upper_CI:= s2_mean+s2_CI]
PVLD_choice_tally[session == "51h TSD",session_lower_CI:= s2_mean-s2_CI]
PVLD_choice_tally[session == "75h TSD",session_upper_CI:= s3_mean+s3_CI]
PVLD_choice_tally[session == "75h TSD",session_lower_CI:= s3_mean-s3_CI]
PVLD.plot.predict <- ggplot(PVLD_choice_tally, aes(x = session, y = prob_correct, fill = session)) +
geom_hline(yintercept = .25, linetype = "dashed", alpha = .7) +
# geom_boxplot(width = .5, outlier.shape = NA) +
geom_quasirandom(width = .2, alpha = .2) +
geom_errorbar(aes(ymin = session_lower_CI, ymax = session_upper_CI), width = .2, linewidth = .85) +
stat_summary(geom = "point", fun = "mean", size = 4, shape = 18, fill = color_palette) +
scale_y_continuous(limits = c(0, 1))+
guides(fill = "none") +
# scale_color_manual(values = color_palette)+
ggpubr::theme_pubr() +
labs(x = "Session", y = "Proportion of correct predictions", title = "Prospect Valence Learning - Delta") +
theme(aspect.ratio = 1.2,
title =  element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.x = element_text(size = 12, family = "Averia Serif Libre Light"),
axis.title.y =element_text(size = 12, family = "Averia Serif Libre Light"))
## Plots with ggbeeswarm::geom_quasirandom
s1_mean <- mean(VSE_choice_tally[session == "Baseline", prob_correct])
s1_CI <- VSE_choice_tally[session == "Baseline", prob_correct] %>% std.error() * 1.96
s2_mean <- mean(VSE_choice_tally[session == "51h TSD", prob_correct])
s2_CI <- VSE_choice_tally[session == "51h TSD", prob_correct] %>% std.error() * 1.96
s3_mean <- mean(VSE_choice_tally[session == "75h TSD", prob_correct])
s3_CI <- VSE_choice_tally[session == "75h TSD" , prob_correct] %>% std.error() * 1.96
s1_mean
s2_mean
s3_mean
VSE.plot.predict
PVLD.plot.predict
ggpubr::ggarrange(PVLD.plot.predict, VSE.plot.predict, ncol = 2)
## Make correlation matrix
cor(igt_data.pars[, .(VSE_theta, VSE_C, b1.score, b2.score, b3.score, b4.score, b5.score, total.score)], method = c("kendall"))
cor(igt_data.pars[,.(VSE_theta, VSE_gamma, VSE_phi, VSE_eta, VSE_C)])
igt_data.matrix <- as.matrix(igt_data.pars[,.(VSE_theta, VSE_gamma, VSE_phi, VSE_eta, VSE_C)])
# igt_data.matrix <- as.matrix(igt_data.pars[, .(VSE_theta, VSE_C, VSE_gamma, VSE_phi, VSE_eta, b1.score, b2.score, b3.score, b4.score, b5.score, total.score)])
Hmisc::rcorr(igt_data.matrix, type = "spearman")
## Build models
m.PVLD.rho    <- lmer(PVLD_rho ~ 1 + session + (1|PtID), data = igt_data.pars)
m.PVLD.lambda <- lmer(PVLD_lambda ~ 1 + session + (1|PtID), data = igt_data.pars)
m.PVLD.eta    <- lmer(PVLD_eta ~ 1 + session + (1|PtID), data = igt_data.pars)
m.PVLD.C      <- lmer(PVLD_C ~ 1 + session + (1|PtID), data = igt_data.pars)
## View results
sjPlot::tab_model(
m.PVLD.rho,
m.PVLD.lambda,
m.PVLD.eta,
m.PVLD.C,
digits = 3, string.ci = "95% CI", title = "Prospect Valence Learning-Delta: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Risk Seeking", "Loss Aversion", "Updating", "Consistency")
)
## Build models
m.PVLD.rho    <- lmer(PVLD_rho ~ 1 +    session*drug + (1|PtID), data = igt_data.pars)
m.PVLD.lambda <- lmer(PVLD_lambda ~ 1 + session*drug + (1|PtID), data = igt_data.pars)
m.PVLD.eta    <- lmer(PVLD_eta ~ 1 +    session*drug + (1|PtID), data = igt_data.pars)
m.PVLD.C      <- lmer(PVLD_C ~ 1 +      session*drug + (1|PtID), data = igt_data.pars)
## View results
sjPlot::tab_model(
m.PVLD.rho,
m.PVLD.lambda,
m.PVLD.eta,
m.PVLD.C,
digits = 3, string.ci = "95% CI", title = "Prospect Valence Learning-Delta: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Risk Seeking", "Loss Aversion", "Updating", "Consistency")
)
m.PVLD.C      <- lmer(PVLD_C ~ 1 +      session + (1|PtID), data = igt_data.pars)
## View results
sjPlot::tab_model(
m.PVLD.rho,
m.PVLD.lambda,
m.PVLD.eta,
m.PVLD.C,
digits = 3, string.ci = "95% CI", title = "Prospect Valence Learning-Delta: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Risk Seeking", "Loss Aversion", "Updating", "Consistency")
)
## Build models
m.PVLD.rho    <- lmer(PVLD_rho ~ 1 +    session + (1|PtID), data = igt_data.pars)
m.PVLD.lambda <- lmer(PVLD_lambda ~ 1 + session + (1|PtID), data = igt_data.pars)
m.PVLD.eta    <- lmer(PVLD_eta ~ 1 +    session + (1|PtID), data = igt_data.pars)
m.PVLD.C      <- lmer(PVLD_C ~ 1 +      session + (1|PtID), data = igt_data.pars)
## View results
sjPlot::tab_model(
m.PVLD.rho,
m.PVLD.lambda,
m.PVLD.eta,
m.PVLD.C,
digits = 3, string.ci = "95% CI", title = "Prospect Valence Learning-Delta: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Risk Seeking", "Loss Aversion", "Updating", "Consistency")
)
## View results
sjPlot::tab_model(
m.PVLD.rho,
m.PVLD.lambda,
m.PVLD.eta,
m.PVLD.C,
show.se = TRUE,
digits = 3, string.ci = "95% CI", title = "Prospect Valence Learning-Delta: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Risk Seeking", "Loss Aversion", "Updating", "Consistency")
)
emm.rho      <- emmeans(m.PVLD.rho, specs = pairwise ~ session, adjust = "bonferroni")
emm.lambda   <- emmeans(m.PVLD.lambda, specs = pairwise ~ session, adjust = "bonferroni")
emm.eta.PVLD <- emmeans(m.PVLD.eta,   specs = pairwise ~ session, adjust = "bonferroni")
emm.C.PVLD   <- emmeans(m.PVLD.C,     specs = pairwise ~ session, adjust = "bonferroni")
emm.ro
emm.lambda
emm.C.PVLD
emm.lambda
emm.rho
emm.eta.PVLD
m.PVLD.lambda
m.PVLD.lambda %>% summary()
emm.lambda
emm.C.PVLD
## View results
sjPlot::tab_model(
m.VSE.theta, m.VSE.gamma,
show.se = T,
digits = 3, string.ci = "95% CI", title = "Value plus Sequential Exploration Model: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Value Sensitivity", "Decay Rate")
)
sjPlot::tab_model(
m.VSE.phi, m.VSE.eta, m.VSE.C,
show.se = T,
digits = 3, string.ci = "95% CI", title = "Value plus Sequential Exploration Model: Model Parameters regressed on Drug/Session Interactions",
dv.labels = c("Exploration Bonus","Exploration Update (Learning Rate)", "Consistency")
)
emm.C.PVLD
90/12
5*7.5
90+37.5+22.5+18.58
